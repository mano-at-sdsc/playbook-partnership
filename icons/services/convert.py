# This script can be used to generate the icons javascript file
#

import sh
import re
import os
import glob
import shutil
import xml.etree.ElementTree as ET

convert = sh.convert
potrace = sh.potrace

tag_re = re.compile(r'(\{[^\}]+?\})?(.+?)')
translate_re = re.compile(r'translate\((-?\d+\.\d+)([ ,])(-?\d+\.\d+)\)')
scale_re = re.compile(r'scale\((-?\d+\.\d+)([ ,])(-?\d+\.\d+)\)')
pair_re = re.compile(r'(-?(\d+\.)?\d+?)([ ,])(-?(\d+\.)?\d+?)')

def one_and_only(it):
  ret = next(it)
  try:
    raise next(it)
  except StopIteration:
    return ret

def slugify(name):
  return name.replace(' ', '').lower()

def extract_path(base):
  print(f"extracting {os.path.basename(base)}")
  tree = ET.parse(f"{base}.tmp.svg")
  root = tree.getroot()
  ns = tag_re.match(root.tag).group(1)
  g = root.find(f"{ns}g")
  # join all the paths into one
  d = ' '.join(
    path.get('d')
    for path in g.iterfind(f"{ns}path")
  )
  return dict(path=d, transform=g.get('transform'), title=os.path.basename(base))

def convert_path(base, ext):
  print(f"converting {os.path.basename(base)}")
  # convert non-svgs to svg
  if ext == '.svg':
    shutil.copy2(f"{base}{ext}", f"{base}.tmp.svg")
  else:
    convert('-flatten', f"{base}{ext}", f"{base}.tmp.pbm")
    potrace('-s', f"{base}.tmp.pbm", '-o', f"{base}.tmp.in.svg")
    # shrink svg to 24x24
    convert(f"{base}.tmp.in.svg",
      '-resize', '24x24',
      '-gravity', 'center',
      '-extent', '24x24',
      f"{base}.tmp.svg"
    )
  result = extract_path(base)
  # cleanup
  for f in glob.glob(f"{base}.tmp.*"):
    os.unlink(f)
  return result

def main():
  with open('index.ts', 'w') as fw:
    print(
      '// This file was generated by ./convert.py',
      *(
        f"export var {slugify(os.path.basename(base))} = {repr(convert_path(base, ext))};"
        for base, ext in map(os.path.splitext, sorted(glob.glob(os.path.join(os.path.dirname(__file__), 'src/*.png'))))
      ),
      sep='\n',
      file=fw,
    )

if __name__ == '__main__':
  main()
